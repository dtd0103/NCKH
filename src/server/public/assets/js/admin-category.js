const categoryTable = document.querySelector("#categoryTable tbody");
const addCategoryForm = document.getElementById("addCategoryForm");
const categoryPageNumbers = document.getElementById("pageNumbers");
const token = localStorage.getItem("authToken");

const rowsPerPage = 5;
let currentCategoryPage = 1;
let categories = [];

// üõí L·∫•y danh s√°ch danh m·ª•c t·ª´ API
async function fetchCategories() {
  try {
    const response = await fetch("http://localhost:8081/api/v1/categories");
    if (!response.ok) {
      throw new Error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu danh m·ª•c");
    }
    categories = await response.json();
    renderCategoryTable(paginateCategoryData(currentCategoryPage));
    updateCategoryPagination();
  } catch (error) {
    console.error("Error fetching categories:", error);
  }
}

// üìå Chia d·ªØ li·ªáu theo trang
function paginateCategoryData(page) {
  const startIndex = (page - 1) * rowsPerPage;
  return categories.slice(startIndex, startIndex + rowsPerPage);
}

// üî¢ C·∫≠p nh·∫≠t s·ªë trang
function updateCategoryPagination() {
  const totalPages = Math.ceil(categories.length / rowsPerPage);
  categoryPageNumbers.innerHTML = `Trang ${currentCategoryPage} tr√™n ${totalPages}`;
}

// ‚¨ÖÔ∏è Chuy·ªÉn v·ªÅ trang tr∆∞·ªõc
document.getElementById("prevPage").addEventListener("click", () => {
  if (currentCategoryPage > 1) {
    currentCategoryPage--;
    renderCategoryTable(paginateCategoryData(currentCategoryPage));
    updateCategoryPagination();
  }
});

// ‚û°Ô∏è Chuy·ªÉn v·ªÅ trang k·∫ø ti·∫øp
document.getElementById("nextPage").addEventListener("click", () => {
  const totalPages = Math.ceil(categories.length / rowsPerPage);
  if (currentCategoryPage < totalPages) {
    currentCategoryPage++;
    renderCategoryTable(paginateCategoryData(currentCategoryPage));
    updateCategoryPagination();
  }
});

// üìå Hi·ªÉn th·ªã d·ªØ li·ªáu danh m·ª•c tr√™n b·∫£ng
function renderCategoryTable(data) {
  categoryTable.innerHTML = "";
  data.forEach((category) => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td>${category.DM_Ma}</td>
      <td>${category.DM_Ten}</td>
      <td><img src="images/categories/${category.DM_HinhAnh}" alt="${category.DM_Ten}" width="50" height="50"></td>
      <td>
        <button class="edit-category-btn" data-id="${category.DM_Ma}">Ch·ªânh s·ª≠a</button>
        <button class="delete-category-btn" data-id="${category.DM_Ma}">X√≥a</button>
      </td>
    `;
    categoryTable.appendChild(row);
  });

  // G·∫Øn s·ª± ki·ªán ch·ªânh s·ª≠a
  document.querySelectorAll(".edit-category-btn").forEach((btn) => {
    btn.addEventListener("click", () => editCategory(btn.dataset.id));
  });

  // G·∫Øn s·ª± ki·ªán x√≥a
  document.querySelectorAll(".delete-category-btn").forEach((btn) => {
    btn.addEventListener("click", () => deleteCategory(btn.dataset.id));
  });
}

// üõí Th√™m danh m·ª•c
addCategoryForm.addEventListener("submit", async (event) => {
  event.preventDefault();
  const categoryName = document.getElementById("categoryName").value;
  const categoryImage = document.getElementById("categoryImage").files[0];

  const formData = new FormData();
  formData.append("name", categoryName);
  formData.append("image", categoryImage);

  try {
    const response = await fetch("http://localhost:8081/api/v1/category", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
      },
      body: formData,
    });

    if (!response.ok) {
      throw new Error("Kh√¥ng th·ªÉ th√™m danh m·ª•c");
    }

    alert("Th√™m danh m·ª•c th√†nh c√¥ng!");
    fetchCategories();
    addCategoryForm.reset();
  } catch (error) {
    console.error("Error adding category:", error);
  }
});

async function editCategory(categoryId) {
  try {
      // üîπ L·∫•y th√¥ng tin danh m·ª•c hi·ªán t·∫°i
      const response = await fetch(`http://localhost:8081/api/v1/category/${categoryId}`, {
          headers: { Authorization: `Bearer ${token}` },
      });

      if (!response.ok) {
          throw new Error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin danh m·ª•c.");
      }

      const category = await response.json();
      document.getElementById("editCategoryName").value = category.DM_Ten;
      document.getElementById("editCategoryOverlay").style.display = "flex";

      // üîπ X·ª≠ l√Ω khi nh·∫•n "L∆∞u thay ƒë·ªïi"
      document.getElementById("editCategoryForm").onsubmit = async (event) => {
          event.preventDefault();

          const formData = new FormData();
          formData.append("DM_Ten", document.getElementById("editCategoryName").value);

          const imageInput = document.getElementById("editCategoryImage");
          if (imageInput.files.length > 0) {
              formData.append("image", imageInput.files[0]); // Ch·ªâ th√™m file n·∫øu c√≥
          }

          try {
              const updateResponse = await fetch(`http://localhost:8081/api/v1/category/${categoryId}`, {
                  method: "PUT",
                  headers: { Authorization: `Bearer ${token}` }, // Kh√¥ng ƒë·∫∑t Content-Type ·ªü ƒë√¢y!
                  body: formData, // S·ª≠ d·ª•ng FormData ƒë·ªÉ g·ª≠i ·∫£nh v√† d·ªØ li·ªáu
              });

              if (!updateResponse.ok) {
                  const errorText = await updateResponse.text();
                  throw new Error("L·ªói t·ª´ API: " + errorText);
              }

              alert("C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng!");
              fetchCategories(); // Load l·∫°i danh s√°ch danh m·ª•c
              document.getElementById("editCategoryOverlay").style.display = "none"; // ·∫®n modal
          } catch (error) {
              alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c: " + error.message);
          }
      };

      // üîπ X·ª≠ l√Ω khi nh·∫•n "H·ªßy"
      document.getElementById("closeEditCategoryOverlay").onclick = () => {
          document.getElementById("editCategoryOverlay").style.display = "none";
      };
  } catch (error) {
      alert("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin danh m·ª•c: " + error.message);
  }
}


// üõ† Ch·ªânh s·ª≠a danh m·ª•c
// async function editCategory(categoryId) {
//   try {
//     const response = await fetch(`http://localhost:8081/api/v1/category/${categoryId}`, {
//       headers: { Authorization: `Bearer ${token}` },
//     });

//     if (!response.ok) {
//       throw new Error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin danh m·ª•c.");
//     }

//     const category = await response.json();
//     document.getElementById("editCategoryName").value = category.DM_Ten;
//     document.getElementById("editCategoryOverlay").style.display = "flex";

//     document.getElementById("editCategoryForm").onsubmit = async (event) => {
//       event.preventDefault();

//       const updatedCategory = {
//         DM_Ten: document.getElementById("editCategoryName").value,
//       };

//       console.log("D·ªØ li·ªáu g·ª≠i ƒëi:", updatedCategory); // Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i

//       try {
//         const updateResponse = await fetch(`http://localhost:8081/api/v1/category/${categoryId}`, {
//           method: "PUT",
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Bearer ${token}`,
//           },
//           body: JSON.stringify(updatedCategory),
//         });

//         if (!updateResponse.ok) {
//           const errorText = await updateResponse.text();
//           throw new Error("L·ªói t·ª´ API: " + errorText);
//         }

//         alert("C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng!");
//         fetchCategories();
//         document.getElementById("editCategoryOverlay").style.display = "none";
//       } catch (error) {
//         alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c: " + error.message);
//       }
//     };

//     document.getElementById("closeEditCategoryOverlay").onclick = () => {
//       document.getElementById("editCategoryOverlay").style.display = "none";
//     };
//   } catch (error) {
//     alert("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin danh m·ª•c: " + error.message);
//   }
// }


// üóë X√≥a danh m·ª•c
async function deleteCategory(categoryId) {
  if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a danh m·ª•c n√†y?")) {
    try {
      const response = await fetch(
        `http://localhost:8081/api/v1/category/${categoryId}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Kh√¥ng th·ªÉ x√≥a danh m·ª•c");
      }

      alert("X√≥a danh m·ª•c th√†nh c√¥ng!");
      fetchCategories();
    } catch (error) {
      console.error("Error deleting category:", error);
      alert("L·ªói: " + error.message);
    }
  }
}

// üèÅ Kh·ªüi ch·∫°y
window.onload = fetchCategories;

